(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-fun prod ((List Int) Int) Bool)
(define-funs-rec ( ( prod ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (* (head x!1) ((_ prod 0) (tail x!1))))))
(assert (forall ((dummy Int)) (=> true (prod nil 1))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (prod xs n) (prod (insert x xs) (* x n)))))
(assert (forall ((xs (List Int)) (n Int) (m Int))
  (=> (and (= ((_ prod 0) xs) m) (= ((_ prod 0) xs) n) (prod xs m) (prod xs n))
      (= m n))))
(check-sat)