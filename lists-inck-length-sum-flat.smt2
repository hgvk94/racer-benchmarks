(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-fun inck-abs ((List Int) (List Int) Int Int Int Int Int) Bool)
(declare-fun length ((List Int) Int) Bool)
(declare-fun sum ((List Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (List Int))) Int)
                   ( length ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (+ (head x!1) ((_ sum 0) (tail x!1))))
                   (ite (= x!1 nil) 0 (+ 1 ((_ length 0) (tail x!1))))))
(assert (forall ((k Int) (c!0 Int) (c!1 Int) (c!2 Int) (c!3 Int))
  (=> (and (= ((_ sum 0) nil) c!0)
           (sum nil c!0)
           (= ((_ length 0) nil) c!1)
           (length nil c!1)
           (= ((_ sum 0) nil) c!2)
           (sum nil c!2)
           (= ((_ length 0) nil) c!3)
           (length nil c!3)
           true)
      (inck-abs nil nil k c!0 c!1 c!2 c!3))))
(assert (forall ((xs! (List Int))
         (xs (List Int))
         (x Int)
         (k Int)
         (c!4 Int)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int))
  (let ((a!1 (= ((_ sum 0) (insert (+ x k) xs!)) c!6))
        (a!2 (= ((_ length 0) (insert (+ x k) xs!)) c!7)))
  (let ((a!3 (and (= ((_ sum 0) (insert x xs)) c!4)
                  (sum (insert x xs) c!4)
                  (= ((_ length 0) (insert x xs)) c!5)
                  (length (insert x xs) c!5)
                  a!1
                  (sum (insert (+ x k) xs!) c!6)
                  a!2
                  (length (insert (+ x k) xs!) c!7)
                  (= ((_ sum 0) xs) c!8)
                  (sum xs c!8)
                  (= ((_ length 0) xs) c!9)
                  (length xs c!9)
                  (= ((_ sum 0) xs!) c!10)
                  (sum xs! c!10)
                  (= ((_ length 0) xs!) c!11)
                  (length xs! c!11)
                  (inck-abs xs xs! k c!8 c!9 c!10 c!11))))
    (=> a!3 (inck-abs (insert x xs) (insert (+ x k) xs!) k c!4 c!5 c!6 c!7))))))
(assert (forall ((dummy Int)) (=> true (length nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (length xs n) (length (insert x xs) (+ 1 n)))))
(assert (forall ((dummy Int)) (=> true (sum nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (sum xs n) (sum (insert x xs) (+ x n)))))
(assert (forall ((xs! (List Int))
         (xs (List Int))
         (k Int)
         (r Int)
         (l Int)
         (n Int)
         (c!12 Int)
         (c!13 Int)
         (c!14 Int)
         (c!15 Int))
  (=> (and (= ((_ sum 0) xs) c!12)
           (sum xs c!12)
           (= ((_ length 0) xs) c!13)
           (length xs c!13)
           (= ((_ sum 0) xs!) c!14)
           (sum xs! c!14)
           (= ((_ length 0) xs!) c!15)
           (length xs! c!15)
           (sum xs n)
           (length xs l)
           (inck-abs xs xs! k c!12 c!13 c!14 c!15)
           (sum xs! r)
           (= ((_ sum 0) xs) n)
           (= ((_ sum 0) xs!) r)
           (= ((_ length 0) xs) l))
      (= r (+ n (* k l))))))
(check-sat)