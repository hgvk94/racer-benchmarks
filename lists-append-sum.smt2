(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-datatypes ((Mut 1)) ((par (k!00)((mut (cur k!00) (ret k!00))))))
(declare-fun append-abs ((Mut (List Int)) (List Int) Int Int Int) Bool)
(declare-fun sum ((List Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (+ (head x!1) ((_ sum 0) (tail x!1))))))
(assert (forall ((xs (List Int)) (c!0 Int) (c!1 Int) (c!2 Int))
  (=> (and (= ((_ sum 0) xs) c!0)
           (sum xs c!0)
           (= ((_ sum 0) nil) c!1)
           (sum nil c!1)
           (= ((_ sum 0) xs) c!2)
           (sum xs c!2)
           true)
      (append-abs (mut nil xs) xs c!0 c!1 c!2))))
(assert (forall ((ys (List Int))
         (xs! (List Int))
         (xs (List Int))
         (x Int)
         (c!3 Int)
         (c!4 Int)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int))
  (let ((a!1 (and (= ((_ sum 0) ys) c!3)
                  (sum ys c!3)
                  (= ((_ sum 0) (insert x xs)) c!4)
                  (sum (insert x xs) c!4)
                  (= ((_ sum 0) (insert x xs!)) c!5)
                  (sum (insert x xs!) c!5)
                  (= ((_ sum 0) ys) c!6)
                  (sum ys c!6)
                  (= ((_ sum 0) xs) c!7)
                  (sum xs c!7)
                  (= ((_ sum 0) xs!) c!8)
                  (sum xs! c!8)
                  (append-abs (mut xs xs!) ys c!6 c!7 c!8))))
    (=> a!1 (append-abs (mut (insert x xs) (insert x xs!)) ys c!3 c!4 c!5)))))
(assert (forall ((dummy Int)) (=> true (sum nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (sum xs n) (sum (insert x xs) (+ x n)))))
(assert (forall ((n Int)
         (m Int)
         (r Int)
         (xs (List Int))
         (xs! (List Int))
         (ys (List Int))
         (c!9 Int)
         (c!10 Int)
         (c!11 Int))
  (=> (and (= ((_ sum 0) ys) c!9)
           (sum ys c!9)
           (= ((_ sum 0) xs) c!10)
           (sum xs c!10)
           (= ((_ sum 0) xs!) c!11)
           (sum xs! c!11)
           (sum xs n)
           (sum ys m)
           (append-abs (mut xs xs!) ys c!9 c!10 c!11)
           (sum xs! r)
           (= ((_ sum 0) xs) n)
           (= ((_ sum 0) ys) m)
           (= ((_ sum 0) xs!) r))
      (= r (+ n m)))))
(check-sat)