(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-datatypes ((Mut 1)) ((par (k!00)((mut (cur k!00) (ret k!00))))))
(declare-fun back-abs ((Mut (List Int)) (Mut (List Int)) Int Int Int Int) Bool)
(declare-fun sum ((List Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (+ (head x!1) ((_ sum 0) (tail x!1))))))
(assert (forall ((xs (List Int)) (c!0 Int) (c!1 Int) (c!2 Int) (c!3 Int))
  (=> (and (= ((_ sum 0) nil) c!0)
           (sum nil c!0)
           (= ((_ sum 0) xs) c!1)
           (sum xs c!1)
           (= ((_ sum 0) nil) c!2)
           (sum nil c!2)
           (= ((_ sum 0) xs) c!3)
           (sum xs c!3)
           true)
      (back-abs (mut nil xs) (mut nil xs) c!0 c!1 c!2 c!3))))
(assert (forall ((mrs (Mut (List Int)))
         (xs! (List Int))
         (xs (List Int))
         (x Int)
         (c!4 Int)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int))
  (let ((a!1 (and (= ((_ sum 0) (insert x xs)) c!4)
                  (sum (insert x xs) c!4)
                  (= ((_ sum 0) (insert x xs!)) c!5)
                  (sum (insert x xs!) c!5)
                  (= ((_ sum 0) (cur mrs)) c!6)
                  (sum (cur mrs) c!6)
                  (= ((_ sum 0) (ret mrs)) c!7)
                  (sum (ret mrs) c!7)
                  (= ((_ sum 0) xs) c!8)
                  (sum xs c!8)
                  (= ((_ sum 0) xs!) c!9)
                  (sum xs! c!9)
                  (= ((_ sum 0) (cur mrs)) c!10)
                  (sum (cur mrs) c!10)
                  (= ((_ sum 0) (ret mrs)) c!11)
                  (sum (ret mrs) c!11)
                  (back-abs (mut xs xs!) mrs c!8 c!9 c!10 c!11))))
    (=> a!1 (back-abs (mut (insert x xs) (insert x xs!)) mrs c!4 c!5 c!6 c!7)))))
(assert (forall ((dummy Int)) (=> true (sum nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (sum xs n) (sum (insert x xs) (+ x n)))))
(assert (forall ((n Int)
         (m Int)
         (r Int)
         (xs (List Int))
         (xs! (List Int))
         (ys (List Int))
         (zs (List Int))
         (zs! (List Int))
         (c!12 Int)
         (c!13 Int)
         (c!14 Int)
         (c!15 Int))
  (=> (and (= ((_ sum 0) xs) c!12)
           (sum xs c!12)
           (= ((_ sum 0) xs!) c!13)
           (sum xs! c!13)
           (= ((_ sum 0) zs) c!14)
           (sum zs c!14)
           (= ((_ sum 0) zs!) c!15)
           (sum zs! c!15)
           (back-abs (mut xs xs!) (mut zs zs!) c!12 c!13 c!14 c!15)
           (sum xs n)
           (sum ys m)
           (sum xs! r)
           (= ((_ sum 0) xs) n)
           (= ((_ sum 0) ys) m)
           (= ((_ sum 0) xs!) r)
           (= zs! ys))
      (= r (+ n m)))))
(check-sat)