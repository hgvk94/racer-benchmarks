(set-logic HORN)
(declare-datatypes ((Tree 1)) ((par (k!00)((leaf) (node (left (Tree k!00)) (value k!00) (right (Tree k!00)))))))
(declare-fun some-abs ((Tree Int) (Tree Int) Int Int Int Int) Bool)
(declare-fun sum ((Tree Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (Tree Int))) Int))
                 ( (ite (= x!1 leaf)
                        0
                        (+ (value x!1)
                           ((_ sum 0) (left x!1))
                           ((_ sum 0) (right x!1))))))
(assert (forall ((txr (Tree Int)) (x! Int) (x Int) (txl (Tree Int)) (c!0 Int) (c!1 Int))
  (let ((a!1 (and (= ((_ sum 0) (node txl x txr)) c!0)
                  (sum (node txl x txr) c!0)
                  (= ((_ sum 0) (node txl x! txr)) c!1)
                  (sum (node txl x! txr) c!1)
                  true)))
    (=> a!1 (some-abs (node txl x txr) (node txl x! txr) x x! c!0 c!1)))))
(assert (forall ((r! Int)
         (r Int)
         (txr (Tree Int))
         (x Int)
         (txl! (Tree Int))
         (txl (Tree Int))
         (c!2 Int)
         (c!3 Int)
         (c!4 Int)
         (c!5 Int))
  (let ((a!1 (and (= ((_ sum 0) (node txl x txr)) c!2)
                  (sum (node txl x txr) c!2)
                  (= ((_ sum 0) (node txl! x txr)) c!3)
                  (sum (node txl! x txr) c!3)
                  (= ((_ sum 0) txl) c!4)
                  (sum txl c!4)
                  (= ((_ sum 0) txl!) c!5)
                  (sum txl! c!5)
                  (some-abs txl txl! r r! c!4 c!5))))
    (=> a!1 (some-abs (node txl x txr) (node txl! x txr) r r! c!2 c!3)))))
(assert (forall ((r! Int)
         (r Int)
         (txr! (Tree Int))
         (txr (Tree Int))
         (x Int)
         (txl (Tree Int))
         (c!6 Int)
         (c!7 Int)
         (c!8 Int)
         (c!9 Int))
  (let ((a!1 (and (= ((_ sum 0) (node txl x txr)) c!6)
                  (sum (node txl x txr) c!6)
                  (= ((_ sum 0) (node txl x txr!)) c!7)
                  (sum (node txl x txr!) c!7)
                  (= ((_ sum 0) txr) c!8)
                  (sum txr c!8)
                  (= ((_ sum 0) txr!) c!9)
                  (sum txr! c!9)
                  (some-abs txr txr! r r! c!8 c!9))))
    (=> a!1 (some-abs (node txl x txr) (node txl x txr!) r r! c!6 c!7)))))
(assert (forall ((dummy Int)) (=> true (sum leaf 0))))
(assert (forall ((m Int) (n Int) (x Int) (txl (Tree Int)) (txr (Tree Int)))
  (=> (and (sum txl m) (sum txr n)) (sum (node txl x txr) (+ m x n)))))
(assert (forall ((n Int)
         (k Int)
         (r Int)
         (tx (Tree Int))
         (tx! (Tree Int))
         (y Int)
         (y! Int)
         (c!10 Int)
         (c!11 Int))
  (=> (and (= ((_ sum 0) tx) c!10)
           (sum tx c!10)
           (= ((_ sum 0) tx!) c!11)
           (sum tx! c!11)
           (sum tx n)
           (some-abs tx tx! y y! c!10 c!11)
           (sum tx! r)
           (= ((_ sum 0) tx) n)
           (= ((_ sum 0) tx!) r)
           (= y! (+ y k)))
      (= r (+ n k)))))
(check-sat)