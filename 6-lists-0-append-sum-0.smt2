(set-logic HORN)
(declare-datatypes ((%List 0)) (((%List-0 (%List-0.0 Int) (%List-0.1 %List)) (%List-1))))
(declare-datatypes ((~Mut<%List> 0)) (((~mut<%List> (~cur<%List> %List) (~ret<%List> %List)))))
(declare-fun %append-abs (~Mut<%List> %List Int Int Int) Bool)
(declare-fun %append.0-abs (~Mut<%List> %List Int Int Int) Bool)
(declare-fun %sum (%List Int) Bool)
(declare-fun %main (Bool) Bool)
(declare-fun %main.8-abs (%List %List Bool Bool Int Int) Bool)
(declare-fun %sum.0 (%List Int) Bool)
(define-funs-rec ( ( sum ((x!1 %List)) Int))
                 ( (ite (= x!1 %List-1)
                        0
                        (+ (%List-0.0 x!1) ((_ sum 0) (%List-0.1 x!1))))))
(assert (forall ((_2 %List)
         (_1 ~Mut<%List>)
         (c!0 Int)
         (c!1 Int)
         (c!2 Int)
         (c!3 Int)
         (c!4 Int)
         (c!5 Int))
  (let ((a!1 (and (= ((_ sum 0) _2) c!0)
                  (%sum _2 c!0)
                  (= ((_ sum 0) (~cur<%List> _1)) c!1)
                  (%sum (~cur<%List> _1) c!1)
                  (= ((_ sum 0) (~ret<%List> _1)) c!2)
                  (%sum (~ret<%List> _1) c!2)
                  (= ((_ sum 0) _2) c!3)
                  (%sum _2 c!3)
                  (= ((_ sum 0) (~cur<%List> _1)) c!4)
                  (%sum (~cur<%List> _1) c!4)
                  (= ((_ sum 0) (~ret<%List> _1)) c!5)
                  (%sum (~ret<%List> _1) c!5)
                  (%append.0-abs _1 _2 c!3 c!4 c!5))))
    (=> a!1 (%append-abs _1 _2 c!0 c!1 c!2)))))
(assert (forall ((_$.0_0/1 %List)
         (_$.0_0/0 Int)
         (_*.3_3 %List)
         (_*.3_1 %List)
         (_2 %List)
         (_1 ~Mut<%List>)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int))
  (let ((a!1 (and (= ((_ sum 0) _2) c!6)
                  (%sum _2 c!6)
                  (= ((_ sum 0) (%List-0 _$.0_0/0 _$.0_0/1)) c!7)
                  (%sum (%List-0 _$.0_0/0 _$.0_0/1) c!7)
                  (= ((_ sum 0) (~ret<%List> _1)) c!8)
                  (%sum (~ret<%List> _1) c!8)
                  (= ((_ sum 0) _2) c!9)
                  (%sum _2 c!9)
                  (= ((_ sum 0) _$.0_0/1) c!10)
                  (%sum _$.0_0/1 c!10)
                  (= ((_ sum 0) _*.3_3) c!11)
                  (%sum _*.3_3 c!11)
                  (%append-abs (~mut<%List> _$.0_0/1 _*.3_3) _2 c!9 c!10 c!11)
                  (= _*.3_1 _*.3_3)
                  (= (~ret<%List> _1) (%List-0 _$.0_0/0 _*.3_1))
                  true)))
    (=> a!1
        (%append.0-abs (~mut<%List> (%List-0 _$.0_0/0 _$.0_0/1)
                                    (~ret<%List> _1))
                       _2
                       c!6
                       c!7
                       c!8)))))
(assert (forall ((_2 %List) (_1 ~Mut<%List>) (c!12 Int) (c!13 Int) (c!14 Int))
  (let ((a!1 (and (= ((_ sum 0) _2) c!12)
                  (%sum _2 c!12)
                  (= ((_ sum 0) %List-1) c!13)
                  (%sum %List-1 c!13)
                  (= ((_ sum 0) (~ret<%List> _1)) c!14)
                  (%sum (~ret<%List> _1) c!14)
                  (= (~ret<%List> _1) _2)
                  true)))
    (=> a!1
        (%append.0-abs (~mut<%List> %List-1 (~ret<%List> _1)) _2 c!12 c!13 c!14)))))
(assert (forall ((_! Bool)
         (_@.3 Int)
         (_@.5 Int)
         (_@.7 Int)
         (_?.0 %List)
         (_?.2 %List)
         (_*.6_5 %List)
         (_*.6_6 %List)
         (_%.0 %List)
         (c!15 Int)
         (c!16 Int)
         (c!17 Int)
         (c!18 Int)
         (c!19 Int))
  (let ((a!1 (%main.8-abs _*.6_5 _%.0 (not (= _@.7 (+ _@.3 _@.5))) _! c!18 c!19)))
    (=> (and (= ((_ sum 0) _?.2) c!15)
             (%sum _?.2 c!15)
             (= ((_ sum 0) _?.0) c!16)
             (%sum _?.0 c!16)
             (= ((_ sum 0) _*.6_6) c!17)
             (%sum _*.6_6 c!17)
             (= ((_ sum 0) _*.6_5) c!18)
             (%sum _*.6_5 c!18)
             (= ((_ sum 0) _%.0) c!19)
             (%sum _%.0 c!19)
             (%sum _?.0 _@.3)
             (%sum _?.2 _@.5)
             (%append-abs (~mut<%List> _?.0 _*.6_6) _?.2 c!15 c!16 c!17)
             (%sum _*.6_5 _@.7)
             a!1
             (= ((_ sum 0) _?.0) _@.3)
             (= ((_ sum 0) _?.2) _@.5)
             (= ((_ sum 0) _*.6_5) _@.7)
             (= _*.6_5 _*.6_6))
        (%main _!)))))
(assert (forall ((_! Bool) (_2 %List) (_1 %List) (c!20 Int) (c!21 Int))
  (=> (and (= ((_ sum 0) _1) c!20)
           (%sum _1 c!20)
           (= ((_ sum 0) _2) c!21)
           (%sum _2 c!21)
           (= _! false))
      (%main.8-abs _1 _2 false _! c!20 c!21))))
(assert (forall ((_! Bool) (_2 %List) (_1 %List) (c!22 Int) (c!23 Int))
  (=> (and (= ((_ sum 0) _1) c!22)
           (%sum _1 c!22)
           (= ((_ sum 0) _2) c!23)
           (%sum _2 c!23)
           (= _! true))
      (%main.8-abs _1 _2 true _! c!22 c!23))))
(assert (forall ((_1 %List) (_@ Int)) (=> (and (%sum.0 _1 _@)) (%sum _1 _@))))
(assert (forall ((_@ Int) (_@.3 Int) (_$.0_0/0 Int) (_$.0_0/1 %List))
  (=> (and (%sum _$.0_0/1 _@.3) (= _@ (+ _$.0_0/0 _@.3)))
      (%sum.0 (%List-0 _$.0_0/0 _$.0_0/1) _@))))
(assert (forall ((_@ Int)) (=> (and (= _@ 0)) (%sum.0 %List-1 _@))))
(assert (forall ((_% Int)) (=> (%main true) false)))
(check-sat)