(set-logic HORN)
(declare-datatypes ((~Mut<Int> 0)) (((~mut<Int> (~cur<Int> Int) (~ret<Int> Int)))))
(declare-fun %main (Bool) Bool)
(declare-fun %main.3 (Bool Bool) Bool)
(declare-fun %take_max (~Mut<Int> ~Mut<Int> ~Mut<Int>) Bool)
(declare-fun %take_max.0 (~Mut<Int> ~Mut<Int> Bool ~Mut<Int>) Bool)
(assert (forall ((_! Bool)
         (_@.2 ~Mut<Int>)
         (_?.0 Int)
         (_?.1 Int)
         (_*.2_3 Int)
         (_*.2_4 Int)
         (_*.2_7 Int)
         (_*.2_8 Int))
  (let ((a!1 (%main.3 (not (not (= _*.2_3 _*.2_7))) _!)))
  (let ((a!2 (and (%take_max (~mut<Int> _?.0 _*.2_4)
                             (~mut<Int> _?.1 _*.2_8)
                             _@.2)
                  (= _*.2_7 _*.2_8)
                  (= _*.2_3 _*.2_4)
                  (= (~ret<Int> _@.2) (+ (~cur<Int> _@.2) 1))
                  a!1)))
    (=> a!2 (%main _!))))))
(assert (forall ((_! Bool)) (=> (and (= _! false)) (%main.3 false _!))))
(assert (forall ((_! Bool)) (=> (and (= _! true)) (%main.3 true _!))))
(assert (forall ((_1 ~Mut<Int>) (_2 ~Mut<Int>) (_@ ~Mut<Int>))
  (let ((a!1 (and (%take_max.0 _1 _2 (>= (~cur<Int> _1) (~cur<Int> _2)) _@))))
    (=> a!1 (%take_max _1 _2 _@)))))
(assert (forall ((_1 ~Mut<Int>)
         (_2 ~Mut<Int>)
         (_@ ~Mut<Int>)
         (_*.1_1 Int)
         (_*.1_2 Int)
         (_*.3_0 Int)
         (_*.3_1 Int))
  (let ((a!1 (and (= _*.1_1 _*.1_2)
                  (= _*.1_2 _*.3_0)
                  (= _*.3_0 _*.3_1)
                  (= (~ret<Int> _1) (~cur<Int> _1))
                  (= (~ret<Int> _2) _*.1_1)
                  (= _@ (~mut<Int> (~cur<Int> _2) _*.3_1)))))
    (=> a!1 (%take_max.0 _1 _2 false _@)))))
(assert (forall ((_1 ~Mut<Int>)
         (_2 ~Mut<Int>)
         (_@ ~Mut<Int>)
         (_*.2_1 Int)
         (_*.2_2 Int)
         (_*.3_0 Int)
         (_*.3_1 Int))
  (let ((a!1 (and (= _*.2_1 _*.2_2)
                  (= _*.2_2 _*.3_0)
                  (= _*.3_0 _*.3_1)
                  (= (~ret<Int> _1) _*.2_1)
                  (= (~ret<Int> _2) (~cur<Int> _2))
                  (= _@ (~mut<Int> (~cur<Int> _1) _*.3_1)))))
    (=> a!1 (%take_max.0 _1 _2 true _@)))))
(assert (forall ((_% Int)) (=> (%main true) false)))
(check-sat)