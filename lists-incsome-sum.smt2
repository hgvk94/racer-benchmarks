(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-datatypes ((Mut 1)) ((par (k!00)((mut (cur k!00) (ret k!00))))))
(declare-fun incsome-abs (Int (Mut (List Int)) Int Int) Bool)
(declare-fun sum ((List Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (+ (head x!1) ((_ sum 0) (tail x!1))))))
(assert (forall ((xs! (List Int)) (xs (List Int)) (x Int) (k Int) (c!0 Int) (c!1 Int))
  (let ((a!1 (= ((_ sum 0) (insert (+ x k) xs)) c!1))
        (a!3 (incsome-abs k (mut (insert x xs) (insert (+ x k) xs)) c!0 c!1)))
  (let ((a!2 (and (= ((_ sum 0) (insert x xs)) c!0)
                  (sum (insert x xs) c!0)
                  a!1
                  (sum (insert (+ x k) xs) c!1)
                  true)))
    (=> a!2 a!3)))))
(assert (forall ((xs! (List Int))
         (xs (List Int))
         (x Int)
         (k Int)
         (c!2 Int)
         (c!3 Int)
         (c!4 Int)
         (c!5 Int))
  (let ((a!1 (and (= ((_ sum 0) (insert x xs)) c!2)
                  (sum (insert x xs) c!2)
                  (= ((_ sum 0) (insert x xs!)) c!3)
                  (sum (insert x xs!) c!3)
                  (= ((_ sum 0) xs) c!4)
                  (sum xs c!4)
                  (= ((_ sum 0) xs!) c!5)
                  (sum xs! c!5)
                  (incsome-abs k (mut xs xs!) c!4 c!5))))
    (=> a!1 (incsome-abs k (mut (insert x xs) (insert x xs!)) c!2 c!3)))))
(assert (forall ((dummy Int)) (=> true (sum nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (sum xs n) (sum (insert x xs) (+ x n)))))
(assert (forall ((n Int)
         (k Int)
         (r Int)
         (xs (List Int))
         (xs! (List Int))
         (c!6 Int)
         (c!7 Int))
  (=> (and (= ((_ sum 0) xs) c!6)
           (sum xs c!6)
           (= ((_ sum 0) xs!) c!7)
           (sum xs! c!7)
           (sum xs n)
           (incsome-abs k (mut xs xs!) c!6 c!7)
           (sum xs! r)
           (= ((_ sum 0) xs) n)
           (= ((_ sum 0) xs!) r))
      (= r (+ n k)))))
(check-sat)