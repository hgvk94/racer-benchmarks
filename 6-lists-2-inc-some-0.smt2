(set-logic HORN)
(declare-datatypes ((%List 0)) (((%List-0 (%List-0.0 Int) (%List-0.1 %List)) (%List-1))))
(declare-datatypes ((~Mut<%List> 0)) (((~mut<%List> (~cur<%List> %List) (~ret<%List> %List)))))
(declare-datatypes ((~Mut<Int> 0)) (((~mut<Int> (~cur<Int> Int) (~ret<Int> Int)))))
(declare-fun %main (Bool) Bool)
(declare-fun %main.6-abs (%List Bool Bool Int) Bool)
(declare-fun %sum (%List Int) Bool)
(declare-fun %take_some-abs (~Mut<%List> ~Mut<Int> Int Int) Bool)
(declare-fun %sum.0 (%List Int) Bool)
(declare-fun %take_some.0-abs (~Mut<%List> ~Mut<Int> Int Int) Bool)
(declare-fun %take_some.4-abs
             (~Mut<%List> ~Mut<Int> ~Mut<%List> Bool ~Mut<Int> Int Int Int Int)
             Bool)
(define-funs-rec ( ( sum ((x!1 %List)) Int))
                 ( (ite (= x!1 %List-1)
                        0
                        (+ (%List-0.0 x!1) ((_ sum 0) (%List-0.1 x!1))))))
(assert (forall ((_! Bool)
         (_@.2 Int)
         (_@.3 ~Mut<Int>)
         (_@.5 Int)
         (_?.0 %List)
         (_*.3_5 %List)
         (_*.3_6 %List)
         (c!0 Int)
         (c!1 Int)
         (c!2 Int))
  (let ((a!1 (%main.6-abs _*.3_5 (not (= _@.5 (+ _@.2 1))) _! c!2)))
  (let ((a!2 (and (= ((_ sum 0) _?.0) c!0)
                  (%sum _?.0 c!0)
                  (= ((_ sum 0) _*.3_6) c!1)
                  (%sum _*.3_6 c!1)
                  (= ((_ sum 0) _*.3_5) c!2)
                  (%sum _*.3_5 c!2)
                  (%sum _?.0 _@.2)
                  (%take_some-abs (~mut<%List> _?.0 _*.3_6) _@.3 c!0 c!1)
                  (%sum _*.3_5 _@.5)
                  a!1
                  (= ((_ sum 0) _?.0) _@.2)
                  (= ((_ sum 0) _*.3_5) _@.5)
                  (= _*.3_5 _*.3_6)
                  (= (~ret<Int> _@.3) (+ (~cur<Int> _@.3) 1)))))
    (=> a!2 (%main _!))))))
(assert (forall ((_! Bool) (_1 %List) (c!3 Int))
  (=> (and (= ((_ sum 0) _1) c!3) (%sum _1 c!3) (= _! false))
      (%main.6-abs _1 false _! c!3))))
(assert (forall ((_! Bool) (_1 %List) (c!4 Int))
  (=> (and (= ((_ sum 0) _1) c!4) (%sum _1 c!4) (= _! true))
      (%main.6-abs _1 true _! c!4))))
(assert (forall ((_1 %List) (_@ Int)) (=> (and (%sum.0 _1 _@)) (%sum _1 _@))))
(assert (forall ((_@ Int) (_@.3 Int) (_$.0_0/0 Int) (_$.0_0/1 %List))
  (=> (and (%sum _$.0_0/1 _@.3) (= _@ (+ _$.0_0/0 _@.3)))
      (%sum.0 (%List-0 _$.0_0/0 _$.0_0/1) _@))))
(assert (forall ((_@ Int)) (=> (and (= _@ 0)) (%sum.0 %List-1 _@))))
(assert (forall ((_@ ~Mut<Int>)
         (_1 ~Mut<%List>)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int))
  (let ((a!1 (and (= ((_ sum 0) (~cur<%List> _1)) c!5)
                  (%sum (~cur<%List> _1) c!5)
                  (= ((_ sum 0) (~ret<%List> _1)) c!6)
                  (%sum (~ret<%List> _1) c!6)
                  (= ((_ sum 0) (~cur<%List> _1)) c!7)
                  (%sum (~cur<%List> _1) c!7)
                  (= ((_ sum 0) (~ret<%List> _1)) c!8)
                  (%sum (~ret<%List> _1) c!8)
                  (%take_some.0-abs _1 _@ c!7 c!8))))
    (=> a!1 (%take_some-abs _1 _@ c!5 c!6)))))
(assert (forall ((_$.0_0/1 %List)
         (_$.0_0/0 Int)
         (_*.3_3 %List)
         (_*.3_1 Int)
         (_?.3 Bool)
         (_@ ~Mut<Int>)
         (_1 ~Mut<%List>)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int)
         (c!12 Int)
         (c!13 Int)
         (c!14 Int))
  (let ((a!1 (and (= ((_ sum 0) (%List-0 _$.0_0/0 _$.0_0/1)) c!9)
                  (%sum (%List-0 _$.0_0/0 _$.0_0/1) c!9)
                  (= ((_ sum 0) (~ret<%List> _1)) c!10)
                  (%sum (~ret<%List> _1) c!10)
                  (= ((_ sum 0) (%List-0 _*.3_1 _*.3_3)) c!11)
                  (%sum (%List-0 _*.3_1 _*.3_3) c!11)
                  (= ((_ sum 0) (~ret<%List> _1)) c!12)
                  (%sum (~ret<%List> _1) c!12)
                  (= ((_ sum 0) _$.0_0/1) c!13)
                  (%sum _$.0_0/1 c!13)
                  (= ((_ sum 0) _*.3_3) c!14)
                  (%sum _*.3_3 c!14)
                  (%take_some.4-abs (~mut<%List> (%List-0 _*.3_1 _*.3_3)
                                                 (~ret<%List> _1))
                                    (~mut<Int> _$.0_0/0 _*.3_1)
                                    (~mut<%List> _$.0_0/1 _*.3_3)
                                    _?.3
                                    _@
                                    c!11
                                    c!12
                                    c!13
                                    c!14))))
    (=> a!1
        (%take_some.0-abs (~mut<%List> (%List-0 _$.0_0/0 _$.0_0/1)
                                       (~ret<%List> _1))
                          _@
                          c!9
                          c!10)))))
(assert (forall ((_*.10_1 Int)
         (_*.10_0 Int)
         (_*.9_0 Int)
         (_*.1_2 %List)
         (_@.1 ~Mut<Int>)
         (_@ ~Mut<Int>)
         (_1 ~Mut<%List>)
         (c!15 Int)
         (c!16 Int)
         (c!17 Int)
         (c!18 Int))
  (let ((a!1 (and (= ((_ sum 0) %List-1) c!15)
                  (%sum %List-1 c!15)
                  (= ((_ sum 0) (~ret<%List> _1)) c!16)
                  (%sum (~ret<%List> _1) c!16)
                  (= ((_ sum 0) %List-1) c!17)
                  (%sum %List-1 c!17)
                  (= ((_ sum 0) _*.1_2) c!18)
                  (%sum _*.1_2 c!18)
                  (%take_some-abs (~mut<%List> %List-1 _*.1_2) _@.1 c!17 c!18)
                  (= (~ret<Int> _@.1) _*.9_0)
                  (= _*.9_0 _*.10_0)
                  (= _*.10_0 _*.10_1)
                  (= (~ret<%List> _1) _*.1_2)
                  (= _@ (~mut<Int> (~cur<Int> _@.1) _*.10_1)))))
    (=> a!1
        (%take_some.0-abs (~mut<%List> %List-1 (~ret<%List> _1)) _@ c!15 c!16)))))
(assert (forall ((_*.10_1 Int)
         (_*.10_0 Int)
         (_*.8_1 Int)
         (_*.8_0 Int)
         (_*.7_2 Int)
         (_*.7_0 Int)
         (_*.5_3 %List)
         (_@.5 ~Mut<Int>)
         (_@ ~Mut<Int>)
         (_6 ~Mut<%List>)
         (_5 ~Mut<Int>)
         (_1 ~Mut<%List>)
         (c!19 Int)
         (c!20 Int)
         (c!21 Int)
         (c!22 Int)
         (c!23 Int)
         (c!24 Int))
  (let ((a!1 (and (= ((_ sum 0) (~cur<%List> _1)) c!19)
                  (%sum (~cur<%List> _1) c!19)
                  (= ((_ sum 0) (~ret<%List> _1)) c!20)
                  (%sum (~ret<%List> _1) c!20)
                  (= ((_ sum 0) (~cur<%List> _6)) c!21)
                  (%sum (~cur<%List> _6) c!21)
                  (= ((_ sum 0) (~ret<%List> _6)) c!22)
                  (%sum (~ret<%List> _6) c!22)
                  (= ((_ sum 0) (~cur<%List> _6)) c!23)
                  (%sum (~cur<%List> _6) c!23)
                  (= ((_ sum 0) _*.5_3) c!24)
                  (%sum _*.5_3 c!24)
                  (%take_some-abs (~mut<%List> (~cur<%List> _6) _*.5_3)
                                  _@.5
                                  c!23
                                  c!24)
                  (= (~ret<Int> _@.5) _*.7_0)
                  (= _*.7_0 _*.7_2)
                  (= _*.7_2 _*.8_0)
                  (= _*.8_0 _*.8_1)
                  (= (~ret<%List> _6) _*.5_3)
                  (= (~ret<Int> _5) (~cur<Int> _5))
                  (= _*.8_1 _*.10_0)
                  (= _*.10_0 _*.10_1)
                  (= (~ret<%List> _1) (~cur<%List> _1))
                  (= _@ (~mut<Int> (~cur<Int> _@.5) _*.10_1)))))
    (=> a!1 (%take_some.4-abs _1 _5 _6 false _@ c!19 c!20 c!21 c!22)))))
(assert (forall ((_*.10_1 Int)
         (_*.10_0 Int)
         (_*.8_1 Int)
         (_*.8_0 Int)
         (_*.6_2 Int)
         (_*.6_1 Int)
         (_@ ~Mut<Int>)
         (_6 ~Mut<%List>)
         (_5 ~Mut<Int>)
         (_1 ~Mut<%List>)
         (c!25 Int)
         (c!26 Int)
         (c!27 Int)
         (c!28 Int))
  (let ((a!1 (and (= ((_ sum 0) (~cur<%List> _1)) c!25)
                  (%sum (~cur<%List> _1) c!25)
                  (= ((_ sum 0) (~ret<%List> _1)) c!26)
                  (%sum (~ret<%List> _1) c!26)
                  (= ((_ sum 0) (~cur<%List> _6)) c!27)
                  (%sum (~cur<%List> _6) c!27)
                  (= ((_ sum 0) (~ret<%List> _6)) c!28)
                  (%sum (~ret<%List> _6) c!28)
                  (= _*.6_1 _*.6_2)
                  (= _*.6_2 _*.8_0)
                  (= _*.8_0 _*.8_1)
                  (= (~ret<%List> _6) (~cur<%List> _6))
                  (= (~ret<Int> _5) _*.6_1)
                  (= _*.8_1 _*.10_0)
                  (= _*.10_0 _*.10_1)
                  (= (~ret<%List> _1) (~cur<%List> _1))
                  (= _@ (~mut<Int> (~cur<Int> _5) _*.10_1)))))
    (=> a!1 (%take_some.4-abs _1 _5 _6 true _@ c!25 c!26 c!27 c!28)))))
(assert (forall ((_% Int)) (=> (%main true) false)))
(check-sat)