(set-logic HORN)
(declare-datatypes ((Tree 1)) ((par (k!00)((leaf) (node (left (Tree k!00)) (value k!00) (right (Tree k!00)))))))
(declare-fun someleaf-abs
             ((Tree Int) (Tree Int) (Tree Int) (Tree Int) Int Int Int Int)
             Bool)
(declare-fun sum ((Tree Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (Tree Int))) Int))
                 ( (ite (= x!1 leaf)
                        0
                        (+ (value x!1)
                           ((_ sum 0) (left x!1))
                           ((_ sum 0) (right x!1))))))
(assert (forall ((tx! (Tree Int)) (c!0 Int) (c!1 Int) (c!2 Int) (c!3 Int))
  (=> (and (= ((_ sum 0) leaf) c!0)
           (sum leaf c!0)
           (= ((_ sum 0) tx!) c!1)
           (sum tx! c!1)
           (= ((_ sum 0) leaf) c!2)
           (sum leaf c!2)
           (= ((_ sum 0) tx!) c!3)
           (sum tx! c!3)
           true)
      (someleaf-abs leaf tx! leaf tx! c!0 c!1 c!2 c!3))))
(assert (forall ((tr! (Tree Int))
         (tr (Tree Int))
         (txr (Tree Int))
         (x Int)
         (txl! (Tree Int))
         (txl (Tree Int))
         (c!4 Int)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int)
         (c!8 Int)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int))
  (let ((a!1 (and (= ((_ sum 0) (node txl x txr)) c!4)
                  (sum (node txl x txr) c!4)
                  (= ((_ sum 0) (node txl! x txr)) c!5)
                  (sum (node txl! x txr) c!5)
                  (= ((_ sum 0) tr) c!6)
                  (sum tr c!6)
                  (= ((_ sum 0) tr!) c!7)
                  (sum tr! c!7)
                  (= ((_ sum 0) txl) c!8)
                  (sum txl c!8)
                  (= ((_ sum 0) txl!) c!9)
                  (sum txl! c!9)
                  (= ((_ sum 0) tr) c!10)
                  (sum tr c!10)
                  (= ((_ sum 0) tr!) c!11)
                  (sum tr! c!11)
                  (someleaf-abs txl txl! tr tr! c!8 c!9 c!10 c!11))))
    (=> a!1
        (someleaf-abs (node txl x txr) (node txl! x txr) tr tr! c!4 c!5 c!6 c!7)))))
(assert (forall ((tr! (Tree Int))
         (tr (Tree Int))
         (txr! (Tree Int))
         (txr (Tree Int))
         (x Int)
         (txl (Tree Int))
         (c!12 Int)
         (c!13 Int)
         (c!14 Int)
         (c!15 Int)
         (c!16 Int)
         (c!17 Int)
         (c!18 Int)
         (c!19 Int))
  (let ((a!1 (and (= ((_ sum 0) (node txl x txr)) c!12)
                  (sum (node txl x txr) c!12)
                  (= ((_ sum 0) (node txl x txr!)) c!13)
                  (sum (node txl x txr!) c!13)
                  (= ((_ sum 0) tr) c!14)
                  (sum tr c!14)
                  (= ((_ sum 0) tr!) c!15)
                  (sum tr! c!15)
                  (= ((_ sum 0) txr) c!16)
                  (sum txr c!16)
                  (= ((_ sum 0) txr!) c!17)
                  (sum txr! c!17)
                  (= ((_ sum 0) tr) c!18)
                  (sum tr c!18)
                  (= ((_ sum 0) tr!) c!19)
                  (sum tr! c!19)
                  (someleaf-abs txr txr! tr tr! c!16 c!17 c!18 c!19))))
    (=> a!1
        (someleaf-abs (node txl x txr)
                      (node txl x txr!)
                      tr
                      tr!
                      c!12
                      c!13
                      c!14
                      c!15)))))
(assert (forall ((dummy Int)) (=> true (sum leaf 0))))
(assert (forall ((m Int) (n Int) (x Int) (txl (Tree Int)) (txr (Tree Int)))
  (=> (and (sum txl m) (sum txr n)) (sum (node txl x txr) (+ m x n)))))
(assert (forall ((m Int)
         (n Int)
         (r Int)
         (tx (Tree Int))
         (tx! (Tree Int))
         (ty (Tree Int))
         (tz (Tree Int))
         (tz! (Tree Int))
         (y Int)
         (y! Int)
         (c!20 Int)
         (c!21 Int)
         (c!22 Int)
         (c!23 Int))
  (=> (and (= ((_ sum 0) tx) c!20)
           (sum tx c!20)
           (= ((_ sum 0) tx!) c!21)
           (sum tx! c!21)
           (= ((_ sum 0) tz) c!22)
           (sum tz c!22)
           (= ((_ sum 0) tz!) c!23)
           (sum tz! c!23)
           (sum tx m)
           (sum ty n)
           (someleaf-abs tx tx! tz tz! c!20 c!21 c!22 c!23)
           (sum tx! r)
           (= ((_ sum 0) tx) m)
           (= ((_ sum 0) ty) n)
           (= ((_ sum 0) tx!) r)
           (= tz! ty))
      (= r (+ m n)))))
(check-sat)