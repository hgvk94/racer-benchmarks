(set-logic HORN)
(declare-datatypes ((List 1)) ((par (k!00)((nil) (insert (head k!00) (tail (List k!00)))))))
(declare-datatypes ((Mut 1)) ((par (k!00)((mut (cur k!00) (ret k!00))))))
(declare-fun inc&back-abs
             ((Mut (List Int)) (Mut (List Int)) Int Int Int Int Int Int Int Int)
             Bool)
(declare-fun length ((List Int) Int) Bool)
(declare-fun sum ((List Int) Int) Bool)
(define-funs-rec ( ( sum ((x!1 (List Int))) Int)
                   ( length ((x!1 (List Int))) Int))
                 ( (ite (= x!1 nil) 0 (+ (head x!1) ((_ sum 0) (tail x!1))))
                   (ite (= x!1 nil) 0 (+ 1 ((_ length 0) (tail x!1))))))
(assert (forall ((xs (List Int))
         (c!0 Int)
         (c!1 Int)
         (c!2 Int)
         (c!3 Int)
         (c!4 Int)
         (c!5 Int)
         (c!6 Int)
         (c!7 Int))
  (=> (and (= ((_ sum 0) nil) c!0)
           (sum nil c!0)
           (= ((_ sum 0) xs) c!1)
           (sum xs c!1)
           (= ((_ length 0) nil) c!2)
           (length nil c!2)
           (= ((_ length 0) xs) c!3)
           (length xs c!3)
           (= ((_ sum 0) nil) c!4)
           (sum nil c!4)
           (= ((_ sum 0) xs) c!5)
           (sum xs c!5)
           (= ((_ length 0) nil) c!6)
           (length nil c!6)
           (= ((_ length 0) xs) c!7)
           (length xs c!7)
           true)
      (inc&back-abs (mut nil xs) (mut nil xs) c!0 c!1 c!2 c!3 c!4 c!5 c!6 c!7))))
(assert (forall ((mrs (Mut (List Int)))
         (xs! (List Int))
         (xs (List Int))
         (x Int)
         (c!8 Int)
         (c!9 Int)
         (c!10 Int)
         (c!11 Int)
         (c!12 Int)
         (c!13 Int)
         (c!14 Int)
         (c!15 Int)
         (c!16 Int)
         (c!17 Int)
         (c!18 Int)
         (c!19 Int)
         (c!20 Int)
         (c!21 Int)
         (c!22 Int)
         (c!23 Int))
  (let ((a!1 (= ((_ sum 0) (insert (+ 1 x) xs!)) c!9))
        (a!2 (= ((_ length 0) (insert (+ 1 x) xs!)) c!11))
        (a!4 (inc&back-abs (mut (insert x xs) (insert (+ x 1) xs!))
                           mrs
                           c!8
                           c!9
                           c!10
                           c!11
                           c!12
                           c!13
                           c!14
                           c!15)))
  (let ((a!3 (and (= ((_ sum 0) (insert x xs)) c!8)
                  (sum (insert x xs) c!8)
                  a!1
                  (sum (insert (+ 1 x) xs!) c!9)
                  (= ((_ length 0) (insert x xs)) c!10)
                  (length (insert x xs) c!10)
                  a!2
                  (length (insert (+ 1 x) xs!) c!11)
                  (= ((_ sum 0) (cur mrs)) c!12)
                  (sum (cur mrs) c!12)
                  (= ((_ sum 0) (ret mrs)) c!13)
                  (sum (ret mrs) c!13)
                  (= ((_ length 0) (cur mrs)) c!14)
                  (length (cur mrs) c!14)
                  (= ((_ length 0) (ret mrs)) c!15)
                  (length (ret mrs) c!15)
                  (= ((_ sum 0) xs) c!16)
                  (sum xs c!16)
                  (= ((_ sum 0) xs!) c!17)
                  (sum xs! c!17)
                  (= ((_ length 0) xs) c!18)
                  (length xs c!18)
                  (= ((_ length 0) xs!) c!19)
                  (length xs! c!19)
                  (= ((_ sum 0) (cur mrs)) c!20)
                  (sum (cur mrs) c!20)
                  (= ((_ sum 0) (ret mrs)) c!21)
                  (sum (ret mrs) c!21)
                  (= ((_ length 0) (cur mrs)) c!22)
                  (length (cur mrs) c!22)
                  (= ((_ length 0) (ret mrs)) c!23)
                  (length (ret mrs) c!23)
                  (inc&back-abs (mut xs xs!)
                                mrs
                                c!16
                                c!17
                                c!18
                                c!19
                                c!20
                                c!21
                                c!22
                                c!23))))
    (=> a!3 a!4)))))
(assert (forall ((dummy Int)) (=> true (length nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (length xs n) (length (insert x xs) (+ 1 n)))))
(assert (forall ((dummy Int)) (=> true (sum nil 0))))
(assert (forall ((n Int) (x Int) (xs (List Int)))
  (=> (sum xs n) (sum (insert x xs) (+ x n)))))
(assert (forall ((zs! (List Int))
         (zs (List Int))
         (ys (List Int))
         (xs! (List Int))
         (xs (List Int))
         (r Int)
         (l Int)
         (m Int)
         (n Int)
         (c!24 Int)
         (c!25 Int)
         (c!26 Int)
         (c!27 Int)
         (c!28 Int)
         (c!29 Int)
         (c!30 Int)
         (c!31 Int))
  (=> (and (= ((_ sum 0) xs) c!24)
           (sum xs c!24)
           (= ((_ sum 0) xs!) c!25)
           (sum xs! c!25)
           (= ((_ length 0) xs) c!26)
           (length xs c!26)
           (= ((_ length 0) xs!) c!27)
           (length xs! c!27)
           (= ((_ sum 0) zs) c!28)
           (sum zs c!28)
           (= ((_ sum 0) zs!) c!29)
           (sum zs! c!29)
           (= ((_ length 0) zs) c!30)
           (length zs c!30)
           (= ((_ length 0) zs!) c!31)
           (length zs! c!31)
           (sum xs n)
           (length xs l)
           (sum ys m)
           (inc&back-abs (mut xs xs!)
                         (mut zs zs!)
                         c!24
                         c!25
                         c!26
                         c!27
                         c!28
                         c!29
                         c!30
                         c!31)
           (sum xs! r)
           (= ((_ sum 0) xs) n)
           (= ((_ sum 0) ys) m)
           (= ((_ sum 0) xs!) r)
           (= ((_ length 0) xs) l)
           (= zs! ys))
      (= r (+ n l m)))))
(check-sat)